#!/bin/bash

lan2=`defaults read -g AppleLocale`

efiroot=`bin/BDMESG |grep SelfDevicePath | sed -e s/".*GPT,//g" -e "s/.*MBR,//g" -e "s/,.*//g"`
if [[ $efiroot = "" ]];then
efiroot=`bin/BDMESG |grep "Found Storage" | sed -e s/".*GPT,//g" -e "s/.*MBR,//g" -e "s/,.*//g"`
fi

source scripts/pashua
source scripts/gui
pashua_run "$conf"

if [ $cb = "1" ]; then
pkill "Kext Updater" & exit
fi

# --- Script Version Info --- #
ScriptVersion=1.5.8
ScriptDEBUG=0

# --- Script Pfade --- #
ScriptHome=$(echo $HOME)
ScriptDownloadPath="${ScriptHome}/Desktop/Kext-Updates"
ScriptTmpPath="/tmp"

if ping -c 1 kextupdater.slsoft.de >> /dev/null 2>&1; then
curl -sS -o ${ScriptTmpPath}/overview.html https://kextupdater.slsoft.de/overview.html
else
echo " "
if [[ $lan2 != "de_DE" ]]; then
echo "Check your Internet Connection or perhaps the Updateserver is down! The Program will close in 5 seconds."
else
echo "Bitte prüfe Deine Internetverbindung bzw. der Updateserver ist u. U. gerade nicht erreichbar. Das Programm schließt sich in 5 Sekunden automatisch."
fi
sleep 5
killall Kext\ Updater
fi

kextstat > ${ScriptTmpPath}/kextstats

checkweb=`cat /tmp/kextstats |grep web.GeForceWeb`
if [[ $checkweb != "" ]]; then
locweb=`cat /Library/Extensions/NVDAStartupWeb.kext/Contents/Info.plist |grep NVDAStartupWeb\ | sed -e "s/.*Web\ //g" -e "s/<\/.*//g" |cut -c 10-99`
echo NVDAStartupWeb "($locweb)" >> ${ScriptTmpPath}/kextstats
fi

bin/BDMESG |grep "Clover revision" |sed -e "s/.*revision:\ /Clover\ (/g" -e "s/\ on.*/)/g" >> ${ScriptTmpPath}/kextstats
sed -ib "s/IntelMausiEthernet\ (2.3.0d0)/IntelMausiEthernet\ (2.3.0)/g" ${ScriptTmpPath}/kextstats
rm ${ScriptTmpPath}/kextstatsb

#========== Kext Array ==========#
## Script Name,kextstat Name, echo Name, Ersatz Name
#
kextArray=(
  "acpibatterymanager","org.rehabman.driver.AppleSmartBatteryManager","ACPI BatteryManager",""
  "airportbrcmfixup","BrcmWLFixup","BrcmWLFixup","AirportBrcmFixup"
  "airportbrcmfixup","AirportBrcmFixup","AirportBrcmFixup",""
  "applealc","ALC","AppleALC",""
  "ath9kfixup","ATH9KFixup","ATH9KFixup",""
  "atherose2200ethernet","AtherosE2200","AtherosE2200Ethernet",""
  "azulpatcher4600","AzulPatcher4600","AzulPatcher4600",""
  "bt4lecontiunityfixup","BT4LEContiunityFixup","BT4LEContiunityFixup",""
  "clover","Clover","Clover Bootloader",""
  "codeccommander","CodecCommander","CodecCommander",""
  "coredisplayfixup","CoreDisplayFixup","CoreDisplayFixup",""
  "cpufriend","CPUFriend","CPUFriend",""
  "enablelidwake","EnableLidWake","EnableLidWake",""
  "fakepciid","FakePCIID","FakePCIID",""
  "fakesmc","FakeSMC","FakeSMC",""
  "hibernationfixup","HibernationFixup","HibernationFixup",""
  "intelgraphicsdvmtfixup","IntelGraphicsDVMTFixup","IntelGraphicsDVMTFixup",""
  "intelgraphicsfixup","IntelGraphicsFixup","IntelGraphicsFixup",""
  "intelmausiethernet","IntelMausi","IntelMausiEthernet",""
  "lilu","Lilu ","Lilu",""
  "lilufriend","LiluFriend","LiluFriend",""
  "nightshiftunlocker","NightShiftUnlocker","NightShiftUnlocker",""
  "nvidiagraphicsfixup","NvidiaGraphicsFixup","NvidiaGraphicsFixup",""
  "realtekrtl8111","RealtekRTL8111","RealtekRTL8111",""
  "shiki","Shiki","Shiki",""
  "usbinjectall","USBInjectAll","USBInjectAll",""
  "voodoohda","VoodooHDA","VoodooHDA",""
  "voodooi2c","VoodooI2C (","VoodooI2C",""
  "whatevergreen","WhateverGreen","WhateverGreen",""
  "intelmausiethernet","AppleIntelE1000","AppleIntelE1000","IntelMausiEthernet"
  "nvidiagraphicsfixup","LibValFix","NVWebDriverLibValFix","NvidiaGraphicsFixup"
  "voodoops2","PS2Controller","VoodooPS2",""
)

#==== Ausgabe Kopfzeilen ==============
function _printHeader()
{
  echo "==========================================================="
  echo "                   K E X T   U P D A T E R                 "
  echo "==========================================================="
  echo " "

  if [[ $kexte == *Updates* ]]; then
  source scripts/special1
  fi

}
#==== Ausgabe Fusszeile ==============
function _printFooter()
{
  echo " "
  echo "==========================================================="
  if [[ $lan2 != "de_DE" ]]; then
  echo "                          D O N E                          "
  else
  echo "                        F E R T I G                        "
  fi
  echo "==========================================================="
  echo " "
  afplay sound/done.mp3
}
#==== Hilfsfunktion Update ==============
function _toUpdate()
{

  if [[ $lan2 != "de_DE" ]]; then
  _PRINT_MSG "Update available!\n
  Your Version..... = $lecho\n
  Server Version... = $recho\n
  Downloading File to your Desktop into the Folder Kext-Updates\n-----------------------------------------------------------\n\n"
  else
  _PRINT_MSG "Update verfügbar!\n
  Installierte Version... = $lecho\n
  Server Version......... = $recho\n
  Lade Datei auf den Desktop in den Ordner Kext-Updates herunter\n-----------------------------------------------------------\n\n"
  fi
}

function _toUpdateLoad()
{

if [[ $lan2 != "de_DE" ]]; then
_PRINT_MSG "Kext available!\n
Downloading $name to your Desktop into the Folder Kext-Updates\n-----------------------------------------------------------\n\n"
else
_PRINT_MSG "Kext verfügbar!\n
Lade $name auf den Desktop in den Ordner Kext-Updates herunter\n-----------------------------------------------------------\n\n"
fi
}



#==== Hilfsfunktion kein Doppelt ==============
function _dupeKext()
{

  if [[ $lan2 != "de_DE" ]]; then
  _PRINT_MSG "The latest Version is already downloaded to your Desktop. If its already installed please remove the Folder from your Desktop.\n-----------------------------------------------------------\n\n"
  else
  _PRINT_MSG "Die aktuellste Version befindet sich bereits auf Deinem Schreibtisch. Wenn der Kext bereits installiert sein sollte, so lösche bitte den entsprechenden Ordner.\n-----------------------------------------------------------\n\n"
  fi


}
#==== Hilfsfunktion kein Kext ==============
function _noUpdate()
{
  if [[ $lan2 != "de_DE" ]]; then
  _PRINT_MSG "√ You are up to date ($lecho)\n-----------------------------------------------------------\n\n"
  else
  _PRINT_MSG "√ Du bist auf dem neusten Stand ($lecho)\n-----------------------------------------------------------\n\n"
  fi
}
#==== Hilfsfunktion veralteter Kext ==============
function _obsoleteKext()
{
  if [[ $lan2 != "de_DE" ]]; then
  _PRINT_MSG "Attention !!!\nPlease make sure to delete your old ${data[2]} and use ${data[3]} instead\n"
  else
  _PRINT_MSG "Achtung !!!\nBitte lösche Deinen alten ${data[2]} und verwende ${data[3]} stattdessen\n"
  fi
}
#==== Hilfsfunktion Message ==============
function _PRINT_MSG()
{
  local message=$1
  printf "${message}\n"
}
#==== Hilfsfunktion Debug ==============
function _DEBUG_PRINT()
{
  if [[ "$ScriptDEBUG" == "1" ]];
    then
      printf "DebugModus $1\n"
  fi
}
#============================== KextUpdate ==============================
function _kextUpdate()
{
  for kextList in "${kextArray[@]}"
    do
       IFS=","
       data=($kextList)
      _DEBUG_PRINT $data
      name=${data[0]}
      lecho=`cat ${ScriptTmpPath}/kextstats |grep ${data[1]} | sed -e "s/.*(//g" -e "s/).*//g"`
      local=`echo $lecho | sed -e "s/\.//g"`

      if ! [[ $local = "" ]]; then
          if [[ $lan2 != "de_DE" ]]; then
          echo "Checking ${data[2]} ..."
          else
          echo "Überprüfe ${data[2]} ..."
          fi
        if ! [[ -z ${data[3]} ]] ; then # veralteter Kext
          _obsoleteKext
        fi
        remote=`cat ${ScriptTmpPath}/overview.html |grep -w $name |sed -e "s/.*-//g" -e "s/+.*//g"`
        recho=`cat ${ScriptTmpPath}/overview.html |grep -w $name |sed "s/.*+//g"`
        if [ -f ${ScriptDownloadPath}/${name}/.version.htm ]; then
          dupe=`cat ${ScriptDownloadPath}/${name}/.version.htm`
          if [[ $dupe = $remote ]]; then
            _dupeKext
          fi
        else
          returnVALUE=$(expr $local '<' $remote)
			if [[ $returnVALUE == "1" ]]; then
          mkdir -p ${ScriptDownloadPath} ${ScriptDownloadPath}/${name}
          _toUpdate
          curl -sS -o ${ScriptTmpPath}/${name}.zip https://kextupdater.slsoft.de/${name}/${name}.zip
          curl -sS -o ${ScriptDownloadPath}/$name/.version.htm https://kextupdater.slsoft.de/${name}/version.htm
          unzip -o -q ${ScriptTmpPath}/${name}.zip -d ${ScriptDownloadPath}/${name}
          rm ${ScriptTmpPath}/${name}.zip 2> /dev/null
        else
          _noUpdate
        fi
      fi
    fi
done
}
#============================== KextLoad ==============================
function _kextLoader()
{
for kextLoadList in "${kextLoadArray[@]}"
  do
    IFS=","
    data=($kextLoadList)
    name=${data[0]}
mkdir -p ${ScriptDownloadPath} ${ScriptDownloadPath}/${name}
_toUpdateLoad
curl -sS -o ${ScriptTmpPath}/${name}.zip https://kextupdater.slsoft.de/${name}/${name}.zip
curl -sS -o ${ScriptDownloadPath}/$name/.version.htm https://kextupdater.slsoft.de/${name}/version.htm
unzip -o -q ${ScriptTmpPath}/${name}.zip -d ${ScriptDownloadPath}/${name}
rm ${ScriptTmpPath}/${name}.zip 2> /dev/null
done
}
#============================== Hauptfunktion ==============================
function _main()
{
  _printHeader
  _DEBUG_PRINT "Anfang Debug Ausgabe\n"
  _kextUpdate
  _DEBUG_PRINT "Ende Debug Ausgabe\n"
  _printFooter
}

function _main1()
{
_printHeader
_DEBUG_PRINT "Anfang Debug Ausgabe\n"
_kextLoader
_DEBUG_PRINT "Ende Debug Ausgabe\n"
_printFooter
}
#============================== Hauptfunktion ==============================

if [ $myb = "1" ]; then
source scripts/gui_info
pashua_run "$conf"
bash script && exit
fi

if [ $mountefi = "1" ]; then
diskutil mount $efiroot
#open /Volumes/EFI
bash script && exit
fi

### APFS Start ###
source scripts/apfs
### APFS End ###

if [[ $kexte == *Updates* ]]; then
  _main
	bash script && exit
  exit 0
fi
  if [[ $kexte == *Grund* ]] || [[ $kexte == *Basic* ]]; then
    kextLoadArray=("fakesmc" "usbinjectall" "voodoops2")
    recho="Kexte"
    _main1
	bash script && exit
  exit 0
  fi
  if [[ $kexte == *Audio* ]]; then
    kextLoadArray=("applealc" "lilu" "codeccommander")
    recho="Kexte"
   _main1
	bash script && exit
  exit 0
  fi
  if [[ $kexte == *Intel* ]]; then
    kextLoadArray=("intelgraphicsfixup" "lilu")
    recho="Kexte"
    _main1
	bash script && exit
  exit 0
  fi
  if [[ $kexte == *nVidia* ]]; then
    kextLoadArray=("lilu" "nvidiagraphicsfixup")
    recho="Kexte"
    _main1
	bash script && exit
  exit 0
  fi
  if [[ $kexte == *AMD* ]]; then
    kextLoadArray=("lilu" "whatevergreen")
    recho="Kexte"
    _main1
	bash script && exit
  exit 0
  fi
  if [[ $kexte == *Ethernet* ]]; then
    kextLoadArray=("atherose2200ethernet" "intelmausiethernet" "realtekrtl8111")
    recho="Kexte"
    _main1
	bash script && exit
  exit 0
  fi
  if [[ $kexte == *Clover* ]]; then
    kextLoadArray=("clover")
    recho="Kexte"
    _main1
	bash script && exit
  exit 0
  fi
#============================== START ==============================
_main
exit 0
#=============================================================
